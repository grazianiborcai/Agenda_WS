<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="
    	http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans.xsd

        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">

        
    <!-- Debugging   
	<security:debug />  --> 
	
	
	
	<!-- Free of authentication --> 
	<http pattern="/**/Signup/**"   security="none"/>
	<http pattern="/**/Signin/**" 	security="none"/>
	<http pattern="/**/Test/**"     security="none"/>
	
	
	
	<!-- BASIC authentication --> 
    <security:http create-session="stateless" pattern="/**/Home/**">
    	 <security:intercept-url pattern="/**" access="isAuthenticated()" />
        <security:http-basic />
        <csrf disabled="true"/>
        <custom-filter before="BASIC_AUTH_FILTER" ref="authFilterPwrd" />
    </security:http>
    


	<!-- JWT Token authentication --> 
    <security:http create-session="stateless" pattern="/**">
        <security:intercept-url pattern="/**/Owner/**"       access="hasAuthority('OWNER_WRITE')" />
        <security:intercept-url pattern="/**/Store/insert**" access="hasAuthority('STORE_INSERT')" />
        <security:intercept-url pattern="/**/Store/update**" access="hasAuthority('STORE_UPDATE')" />
        <security:intercept-url pattern="/**/Store/delete**" access="hasAuthority('STORE_DELETE')" />
        <security:intercept-url pattern="/**/Store/select**" access="hasAuthority('STORE_READ')" />
        <security:intercept-url pattern="/**"                access="isAuthenticated()" />
        <security:http-basic />
        <csrf disabled="true"/>
        <custom-filter before="BASIC_AUTH_FILTER" ref="authFilterJwtoken" />
    </security:http> 
    
    
    <!-- TODO: habilitar CSRF protection 
    "isAuthenticated()"		"hasRole('ROLE_USER')"	
    FORM_LOGIN_FILTER		BASIC_AUTH_FILTER	
    hasAuthority('MBM_02') or hasAuthority('MBM_03')-->
    
    
    
    <!-- Filter Bean -->
	<beans:bean id="authFilterPwrd"
		class="br.com.gda.servlet.authentication.AuthFilterPwrd">
		<beans:constructor-arg ref="authenticationManagerPwrd"/>
		<beans:constructor-arg ref="authEntryPointPwrd"/>
	</beans:bean> 
	
	<beans:bean id="authEntryPointPwrd" class="br.com.gda.servlet.authentication.AuthEntryPointPwrd"/>
	
	
	<beans:bean id="authFilterJwtoken"
		class="br.com.gda.servlet.authentication.AuthFilterJwtoken">
		<beans:constructor-arg ref="authenticationManagerJwtoken"/>
	</beans:bean> 


	<!-- Authentication Provider - Basic -->
    <security:authentication-manager alias="authenticationManagerPwrd" id="authenticationManagerPwrd">
        <authentication-provider ref="authProviderPwrd" >
        </authentication-provider>
    </security:authentication-manager>    
    
    <beans:bean id="authProviderPwrd" class="br.com.gda.servlet.authentication.AuthProviderPwrd"/>    
    
    
	<!-- Authentication Provider - Token -->
    <security:authentication-manager alias="authenticationManagerJwtoken" id="authenticationManagerJwtoken">
        <authentication-provider ref="authProviderJwtoken" >
        </authentication-provider>
    </security:authentication-manager>     
    
    <beans:bean id="authProviderJwtoken" class="br.com.gda.servlet.authentication.AuthProviderJwtoken"/>
</beans:beans>