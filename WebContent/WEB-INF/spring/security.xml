<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
    xmlns:beans="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:security="http://www.springframework.org/schema/security"
    xsi:schemaLocation="
    	http://www.springframework.org/schema/beans
    	http://www.springframework.org/schema/beans/spring-beans.xsd

        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security.xsd">

        
    <!-- Debugging   
	<security:debug />  --> 
	
	
	
	<!-- Free of authentication --> 
	<http pattern="/**/Signup/**"   security="none"/>
	<http pattern="/**/Signin/**" 	security="none"/>
	<http pattern="/**/Test/**"     security="none"/>
	
	
	
	<!-- BASIC authentication --> 
    <security:http create-session="stateless" pattern="/**/Home**">
    	<security:intercept-url pattern="/**" access="isAuthenticated()" />
        <security:http-basic />
        <csrf disabled="true"/>
        <!-- TODO: filtro para verificar param obrigatorios no cabecalho --> 
        <custom-filter before="BASIC_AUTH_FILTER" ref="authFilterPwrd" />
    </security:http>
    


	<!-- JWT Token authentication --> 
    <security:http create-session="stateless" pattern="/**">
        <security:intercept-url pattern="/**/Owner/**"       access="hasAuthority('OWNER_WRITE')" />
        <security:intercept-url pattern="/**/Store/insert**" access="hasAuthority('STORE_INSERT')" />
        <security:intercept-url pattern="/**/Store/update**" access="hasAuthority('STORE_UPDATE')" />
        <security:intercept-url pattern="/**/Store/delete**" access="hasAuthority('STORE_DELETE')" />
        <security:intercept-url pattern="/**/Store/select**" access="hasAuthority('STORE_READ')" />
        <security:intercept-url pattern="/**"                access="isAuthenticated()" />
        <security:http-basic />
        <csrf disabled="true"/>
        <custom-filter after="SECURITY_CONTEXT_FILTER" ref="ownerFilter" />
        <custom-filter before="BASIC_AUTH_FILTER" ref="authFilterPwrd" />
    </security:http>
    
    
    <!-- TODO: habilitar CSRF protection 
    "isAuthenticated()"		"hasRole('ROLE_USER')"	
    FORM_LOGIN_FILTER		BASIC_AUTH_FILTER	
    hasAuthority('MBM_02') or hasAuthority('MBM_03')-->
    
    
    
    <!-- Filter Bean -->
	<beans:bean id="authFilterPwrd"
		class="br.com.gda.servlet.authentication.AuthFilterPwrd">
		<beans:constructor-arg ref="authenticationManager"/>
	</beans:bean> 
	
	
	<beans:bean id="ownerFilter"
		class="br.com.gda.servlet.header.OwnerFilter">
	</beans:bean> 


	<!-- Authentication -->
    <security:authentication-manager alias="authenticationManager">
        <authentication-provider ref="authProviderPwrd" >
        </authentication-provider>
    </security:authentication-manager>
    
    
    <beans:bean id="authProviderPwrd" class="br.com.gda.servlet.authentication.AuthProviderPwrd"/>
 

    
    <!--
   	<beans:bean id="passwordEncoder" class="org.springframework.security.crypto.password.NoOpPasswordEncoder"
		factory-method="getInstance" />
   
   
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider>
            <security:user-service>
                <security:user name="rest" password="rest" authorities="ROLE_USER"/>
            </security:user-service>
            <password-encoder ref="passwordEncoder" />
        </security:authentication-provider>
    </security:authentication-manager>
    -->


</beans:beans>